CREATE TABLE IF NOT EXISTS mpa (
id INT PRIMARY KEY,
name VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS genres (
id INT PRIMARY KEY,
name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS users (
id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
email VARCHAR(255) NOT NULL UNIQUE,
login VARCHAR(255) NOT NULL UNIQUE,
name VARCHAR(255),
birthday DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS films (
id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR(255) NOT NULL,
description VARCHAR(200),
release_date DATE,
duration INT NOT NULL CHECK (duration > 0),
mpa_id INT NOT NULL,
CONSTRAINT fk_films_mpa FOREIGN KEY (mpa_id) REFERENCES mpa(id)
);

CREATE TABLE IF NOT EXISTS film_genres (
film_id INT NOT NULL,
genre_id INT NOT NULL,
PRIMARY KEY (film_id, genre_id),
CONSTRAINT fk_fg_film FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
CONSTRAINT fk_fg_genre FOREIGN KEY (genre_id) REFERENCES genres(id)
);

CREATE TABLE IF NOT EXISTS film_likes (
film_id INT NOT NULL,
user_id INT NOT NULL,
PRIMARY KEY (film_id, user_id),
CONSTRAINT fk_fl_film FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
CONSTRAINT fk_fl_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS friendships (
user_id INT NOT NULL,
friend_id INT NOT NULL,
status VARCHAR(10) NOT NULL CHECK (status IN ('PENDING', 'CONFIRMED')),
PRIMARY KEY (user_id, friend_id),
CONSTRAINT fk_fr_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
CONSTRAINT fk_fr_friend FOREIGN KEY (friend_id) REFERENCES users(id) ON DELETE CASCADE,
CHECK (user_id <> friend_id)
);

CREATE INDEX IF NOT EXISTS idx_film_likes_user ON film_likes(user_id);
CREATE INDEX IF NOT EXISTS idx_film_genres_genre ON film_genres(genre_id);
CREATE INDEX IF NOT EXISTS idx_friendships_user ON friendships(user_id);
CREATE INDEX IF NOT EXISTS idx_friendships_friend ON friendships(friend_id);